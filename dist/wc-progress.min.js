!function(){"use strict";class t extends HTMLElement{static get observedAttributes(){return["progress","start","middle","end","height"]}sanitiseHex(t){if(0===t.indexOf("#")&&(t=t.slice(1)),3===t.length&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]),6!==t.length)throw new Error("Invalid colour.");return`#${t}`}get css(){return`\n      .progress {\n        width: 100%;\n        height: ${this.height}px;\n        border: 1px solid #888888;\n        background: #DDDDDD;\n        position: relative;\n      }\n      .bar {\n        position: absolute;\n        width: ${this.progress}%;\n        height: 100%;\n        background-color: ${this.progress<50?this.mixColour(this.start,this.middle,this.progress/50):this.mixColour(this.middle,this.end,(this.progress-50)/50)};\n      }\n    `}get html(){return'\n      <div class="progress">\n        <div class="bar"/>\n      </div>\n    '}constructor(){super(),this.attachShadow({mode:"open"}),this.render()}hexToRGB=t=>t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,((t,e,s,i)=>`#${e}${e}${s}${s}${i}${i}`)).substring(1).match(/.{2}/g).map((t=>parseInt(t,16)));mixColour=(t,e,s)=>this.RGBToHex(Math.round(this.mix(t[0],e[0],s)),Math.round(this.mix(t[1],e[1],s)),Math.round(this.mix(t[2],e[2],s)));RGBToHex=(t,e,s)=>`#${((1<<24)+(t<<16)+(e<<8)+s).toString(16).slice(1)}`;mix=(t,e,s)=>t+s*(e-t);connectedCallback(){this.render()}attributeChangedCallback(t,e,s){("value"===t||e!==s)&&this.render()}render(){this.shadowRoot.innerHTML=`\n      <style>\n        ${this.css}\n      </style>\n      ${this.html}\n    `}get progress(){return Number(this.getAttribute("progress"))||0}get height(){return Number(this.getAttribute("height"))||20}get start(){return this.getAttribute("start")?this.hexToRGB(this.sanitiseHex(this.getAttribute("start"))):this.hexToRGB("#FF0000")}get middle(){return this.getAttribute("middle")?this.hexToRGB(this.sanitiseHex(this.getAttribute("middle"))):this.hexToRGB("#FF9900")}get end(){return this.getAttribute("end")?this.hexToRGB(this.sanitiseHex(this.getAttribute("end"))):this.hexToRGB("#33FF00")}}window.customElements.define("wc-progress",t)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2MtcHJvZ3Jlc3MubWluLmpzIiwic291cmNlcyI6WyIuLi93Yy1wcm9ncmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBXQ1Byb2dyZXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG5cclxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdwcm9ncmVzcycsXHJcbiAgICAgICdzdGFydCcsXHJcbiAgICAgICdtaWRkbGUnLFxyXG4gICAgICAnZW5kJyxcclxuICAgICAgJ2hlaWdodCcsXHJcbiAgICBdXHJcbiAgfVxyXG4gIFxyXG4gIHNhbml0aXNlSGV4KGhleCkge1xyXG4gICAgaWYgKGhleC5pbmRleE9mKCcjJykgPT09IDApIHtcclxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDEpXHJcbiAgICB9XHJcbiAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xyXG4gICAgICBoZXggPSBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl1cclxuICAgIH1cclxuICAgIGlmIChoZXgubGVuZ3RoICE9PSA2KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2xvdXIuJylcclxuICAgIH1cclxuICAgIHJldHVybiBgIyR7aGV4fWBcclxuICB9XHJcblxyXG4gIGdldCBjc3MoKSB7XHJcbiAgICByZXR1cm4gYFxyXG4gICAgICAucHJvZ3Jlc3Mge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogJHt0aGlzLmhlaWdodH1weDtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjODg4ODg4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNEREREREQ7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICB9XHJcbiAgICAgIC5iYXIge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB3aWR0aDogJHt0aGlzLnByb2dyZXNzfSU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy5wcm9ncmVzcyA8IDUwXHJcbiAgICAgICAgICA/IHRoaXMubWl4Q29sb3VyKHRoaXMuc3RhcnQsIHRoaXMubWlkZGxlLCAodGhpcy5wcm9ncmVzcyAvIDUwKSlcclxuICAgICAgICAgIDogdGhpcy5taXhDb2xvdXIodGhpcy5taWRkbGUsIHRoaXMuZW5kLCAoKHRoaXMucHJvZ3Jlc3MgLSA1MCkgLyA1MCkpfTtcclxuICAgICAgfVxyXG4gICAgYFxyXG4gIH1cclxuXHJcbiAgZ2V0IGh0bWwoKSB7XHJcbiAgICByZXR1cm4gYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmFyXCIvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGBcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKVxyXG4gICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSlcclxuICAgIHRoaXMucmVuZGVyKClcclxuICB9XHJcblxyXG4gIGhleFRvUkdCID0gaGV4ID0+IGhleC5yZXBsYWNlKC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2ksIChtLCByLCBnLCBiKSA9PiBgIyR7cn0ke3J9JHtnfSR7Z30ke2J9JHtifWApLnN1YnN0cmluZygxKS5tYXRjaCgvLnsyfS9nKS5tYXAoeCA9PiBwYXJzZUludCh4LCAxNikpXHJcbiAgXHJcbiAgbWl4Q29sb3VyID0gKGMxLCBjMiwgcGMpID0+IHRoaXMuUkdCVG9IZXgoTWF0aC5yb3VuZCh0aGlzLm1peChjMVswXSwgYzJbMF0sIHBjKSksIE1hdGgucm91bmQodGhpcy5taXgoYzFbMV0sIGMyWzFdLCBwYykpLCBNYXRoLnJvdW5kKHRoaXMubWl4KGMxWzJdLCBjMlsyXSwgcGMpKSlcclxuICBcclxuICBSR0JUb0hleCA9IChyLCBnLCBiKSA9PiBgIyR7KCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpfWBcclxuICBcclxuICBtaXggPSAocywgZSwgcGMpID0+IHMgKyAoKHBjKSAqIChlIC0gcykpXHJcblxyXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgdGhpcy5yZW5kZXIoKVxyXG4gIH1cclxuXHJcbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgaWYgKG5hbWUgPT09ICd2YWx1ZScpIHtcclxuICAgICAgdGhpcy5yZW5kZXIoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyKClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy5zaGFkb3dSb290LmlubmVySFRNTCA9IGBcclxuICAgICAgPHN0eWxlPlxyXG4gICAgICAgICR7dGhpcy5jc3N9XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICAgICR7dGhpcy5odG1sfVxyXG4gICAgYFxyXG4gIH1cclxuXHJcbiAgZ2V0IHByb2dyZXNzKCkge1xyXG4gICAgcmV0dXJuIE51bWJlcih0aGlzLmdldEF0dHJpYnV0ZSgncHJvZ3Jlc3MnKSkgfHwgMFxyXG4gIH1cclxuICBnZXQgaGVpZ2h0KCkge1xyXG4gICAgcmV0dXJuIE51bWJlcih0aGlzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpIHx8IDIwXHJcbiAgfVxyXG4gICAgXHJcbiAgZ2V0IHN0YXJ0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdzdGFydCcpIFxyXG4gICAgICA/IHRoaXMuaGV4VG9SR0IodGhpcy5zYW5pdGlzZUhleCh0aGlzLmdldEF0dHJpYnV0ZSgnc3RhcnQnKSkpXHJcbiAgICAgIDogdGhpcy5oZXhUb1JHQignI0ZGMDAwMCcpXHJcbiAgfVxyXG4gIGdldCBtaWRkbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ21pZGRsZScpIFxyXG4gICAgICA/IHRoaXMuaGV4VG9SR0IodGhpcy5zYW5pdGlzZUhleCh0aGlzLmdldEF0dHJpYnV0ZSgnbWlkZGxlJykpKVxyXG4gICAgICA6IHRoaXMuaGV4VG9SR0IoJyNGRjk5MDAnKVxyXG4gIH1cclxuICBnZXQgZW5kKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdlbmQnKSBcclxuICAgICAgPyB0aGlzLmhleFRvUkdCKHRoaXMuc2FuaXRpc2VIZXgodGhpcy5nZXRBdHRyaWJ1dGUoJ2VuZCcpKSlcclxuICAgICAgOiB0aGlzLmhleFRvUkdCKCcjMzNGRjAwJylcclxuICB9XHJcblxyXG59XHJcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3djLXByb2dyZXNzJywgV0NQcm9ncmVzcykiXSwibmFtZXMiOlsiV0NQcm9ncmVzcyIsIkhUTUxFbGVtZW50Iiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwic2FuaXRpc2VIZXgiLCJoZXgiLCJpbmRleE9mIiwic2xpY2UiLCJsZW5ndGgiLCJFcnJvciIsImNzcyIsInRoaXMiLCJoZWlnaHQiLCJwcm9ncmVzcyIsIm1peENvbG91ciIsInN0YXJ0IiwibWlkZGxlIiwiZW5kIiwiaHRtbCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwicmVuZGVyIiwiaGV4VG9SR0IiLCJyZXBsYWNlIiwibSIsInIiLCJnIiwiYiIsInN1YnN0cmluZyIsIm1hdGNoIiwibWFwIiwieCIsInBhcnNlSW50IiwiYzEiLCJjMiIsInBjIiwiUkdCVG9IZXgiLCJNYXRoIiwicm91bmQiLCJtaXgiLCJ0b1N0cmluZyIsInMiLCJlIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInNoYWRvd1Jvb3QiLCJpbm5lckhUTUwiLCJOdW1iZXIiLCJnZXRBdHRyaWJ1dGUiLCJ3aW5kb3ciLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJtYXBwaW5ncyI6InlCQUFBLE1BQU1BLFVBQW1CQyxZQUVaQyxnQ0FDVCxNQUFPLENBQ0wsV0FDQSxRQUNBLFNBQ0EsTUFDQSxTQUVILENBRURDLFlBQVlDLEdBT1YsR0FOeUIsSUFBckJBLEVBQUlDLFFBQVEsT0FDZEQsRUFBTUEsRUFBSUUsTUFBTSxJQUVDLElBQWZGLEVBQUlHLFNBQ05ILEVBQU1BLEVBQUksR0FBS0EsRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FBS0EsRUFBSSxHQUFLQSxFQUFJLElBRXRDLElBQWZBLEVBQUlHLE9BQ04sTUFBTSxJQUFJQyxNQUFNLG1CQUVsQixNQUFPLElBQUlKLEdBQ1osQ0FFR0ssVUFDRixNQUFPLDhEQUdPQyxLQUFLQyxnTEFPTkQsS0FBS0UsZ0VBRU1GLEtBQUtFLFNBQVcsR0FDaENGLEtBQUtHLFVBQVVILEtBQUtJLE1BQU9KLEtBQUtLLE9BQVNMLEtBQUtFLFNBQVcsSUFDekRGLEtBQUtHLFVBQVVILEtBQUtLLE9BQVFMLEtBQUtNLEtBQU9OLEtBQUtFLFNBQVcsSUFBTSxxQkFHdkUsQ0FFR0ssV0FDRixNQUFPLGdGQUtSLENBRURDLGNBQ0VDLFFBQ0FULEtBQUtVLGFBQWEsQ0FBRUMsS0FBTSxTQUMxQlgsS0FBS1ksUUFDTixDQUVEQyxTQUFXbkIsR0FBT0EsRUFBSW9CLFFBQVEsb0NBQW9DLENBQUNDLEVBQUdDLEVBQUdDLEVBQUdDLElBQU0sSUFBSUYsSUFBSUEsSUFBSUMsSUFBSUEsSUFBSUMsSUFBSUEsTUFBS0MsVUFBVSxHQUFHQyxNQUFNLFNBQVNDLEtBQUlDLEdBQUtDLFNBQVNELEVBQUcsTUFFaEtuQixVQUFZLENBQUNxQixFQUFJQyxFQUFJQyxJQUFPMUIsS0FBSzJCLFNBQVNDLEtBQUtDLE1BQU03QixLQUFLOEIsSUFBSU4sRUFBRyxHQUFJQyxFQUFHLEdBQUlDLElBQU1FLEtBQUtDLE1BQU03QixLQUFLOEIsSUFBSU4sRUFBRyxHQUFJQyxFQUFHLEdBQUlDLElBQU1FLEtBQUtDLE1BQU03QixLQUFLOEIsSUFBSU4sRUFBRyxHQUFJQyxFQUFHLEdBQUlDLEtBRTVKQyxTQUFXLENBQUNYLEVBQUdDLEVBQUdDLElBQU0sTUFBTSxHQUFLLEtBQU9GLEdBQUssS0FBT0MsR0FBSyxHQUFLQyxHQUFHYSxTQUFTLElBQUluQyxNQUFNLEtBRXRGa0MsSUFBTSxDQUFDRSxFQUFHQyxFQUFHUCxJQUFPTSxFQUFLLEdBQVFDLEVBQUlELEdBRXJDRSxvQkFDRWxDLEtBQUtZLFFBQ04sQ0FFRHVCLHlCQUF5QkMsRUFBTUMsRUFBVUMsSUFDMUIsVUFBVEYsR0FHRUMsSUFBYUMsSUFGakJ0QyxLQUFLWSxRQU1SLENBRURBLFNBQ0VaLEtBQUt1QyxXQUFXQyxVQUFZLDRCQUV0QnhDLEtBQUtELDhCQUVQQyxLQUFLTyxZQUVWLENBRUdMLGVBQ0YsT0FBT3VDLE9BQU96QyxLQUFLMEMsYUFBYSxjQUFnQixDQUNqRCxDQUNHekMsYUFDRixPQUFPd0MsT0FBT3pDLEtBQUswQyxhQUFhLFlBQWMsRUFDL0MsQ0FFR3RDLFlBQ0YsT0FBT0osS0FBSzBDLGFBQWEsU0FDckIxQyxLQUFLYSxTQUFTYixLQUFLUCxZQUFZTyxLQUFLMEMsYUFBYSxXQUNqRDFDLEtBQUthLFNBQVMsVUFDbkIsQ0FDR1IsYUFDRixPQUFPTCxLQUFLMEMsYUFBYSxVQUNyQjFDLEtBQUthLFNBQVNiLEtBQUtQLFlBQVlPLEtBQUswQyxhQUFhLFlBQ2pEMUMsS0FBS2EsU0FBUyxVQUNuQixDQUNHUCxVQUNGLE9BQU9OLEtBQUswQyxhQUFhLE9BQ3JCMUMsS0FBS2EsU0FBU2IsS0FBS1AsWUFBWU8sS0FBSzBDLGFBQWEsU0FDakQxQyxLQUFLYSxTQUFTLFVBQ25CLEVBR0g4QixPQUFPQyxlQUFlQyxPQUFPLGNBQWV2RCJ9
